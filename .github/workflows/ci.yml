name: CI

on:
  - pull_request

permissions:
  contents: read

jobs:
  build:
    name: Build and test on GHC ${{ matrix.ghc-version }}
    strategy:
      matrix:
        ghc-version: ["9.4.8", "9.6.6", "9.8.2", "9.10.1"]
    runs-on: ubuntu-latest
    steps:
      # Derived from example at https://github.com/haskell-actions/setup
      - uses: actions/checkout@v4

      - name: Set up GHC ${{ matrix.ghc-version }}
        uses: haskell-actions/setup@v2.7.6
        id: setup
        with:
          ghc-version: ${{ matrix.ghc-version }}

      - name: Check cabal file
        run: cabal check

      - shell: bash
        run: |
          cabal configure --enable-tests --disable-documentation
          cabal build --dry-run
        # The last step generates dist-newstyle/cache/plan.json for the cache key.

      - uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ env.key }}-

      - shell: bash
        # If we had an exact cache hit, the dependencies will be up to date.
        if: steps.cache.outputs.cache-hit != 'true'
        run: cabal build all --only-dependencies

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - uses: actions/cache/save@v4
        # If we had an exact cache hit, trying to save the cache would error because of key clash.
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - shell: bash
        run: cabal build all
      - shell: bash
        run: cabal test all
      - shell: bash
        run: cabal haddock all
